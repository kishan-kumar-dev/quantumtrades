generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int            @id @default(autoincrement())
  email     String         @unique
  password  String
  role      String         @default("trader")
  name      String?        // Optional user name
  orders    Order[]
  trades    Trade[]        @relation("UserTrades")
  tokens    RefreshToken[]
  createdAt DateTime       @default(now())
}

model Market {
  id        Int      @id @default(autoincrement())
  symbol    String   @unique // e.g. "BTC/USDT"
  base      String   // e.g. "BTC"
  quote     String   // e.g. "USDT"
  orders    Order[]
  createdAt DateTime @default(now())
}

model Order {
  id        Int    @id @default(autoincrement())
  side      String // "buy" or "sell"
  kind      String // "limit" or "market"
  price     Float?
  quantity  Int
  remaining Int
  status    String @default("open")

  userId    Int
  user      User   @relation(fields: [userId], references: [id])

  marketId  Int
  market    Market @relation(fields: [marketId], references: [id])

  // Relations for trades
  buyTrades  Trade[] @relation("BuyTrades")
  sellTrades Trade[] @relation("SellTrades")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trade {
  id       Int   @id @default(autoincrement())
  price    Float
  quantity Int

  buyOrderId Int
  buyOrder   Order @relation("BuyTrades", fields: [buyOrderId], references: [id])

  sellOrderId Int
  sellOrder   Order @relation("SellTrades", fields: [sellOrderId], references: [id])

  userId Int
  user   User @relation("UserTrades", fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
}
